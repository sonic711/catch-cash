buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
//        classpath 'com.github.node-gradle:gradle-node-plugin:3.5.1'
        classpath 'com.github.node-gradle.node:com.github.node-gradle.node.gradle.plugin:7.1.0'

    }
}

ext {
    classpath_in_jar = 'public'
    //可利用參數帶入-Pdeploy_module=:fsap-XXX-XXX
    deploy_module = project.findProperty('deploy_module') ?: null
    deploy_dir = deploy_module ? project(deploy_module).projectDir.absolutePath + '/src/main/resources/static' : 'dist'
}

apply plugin: 'com.github.node-gradle.node'
apply plugin: 'java'

bootJar {
    enabled = false
}

bootRun {
    enabled = false
}

bootTestRun {
    enabled = false
}

jar {
    enabled = false
}

if (gradle.startParameter.offline) {
    nodeSetup.enabled = false
    npmSetup.enabled = false
    yarnSetup.enabled = false
}

node {
    version = '18.16.0'
    yarnVersion = '1.22.18'
    download = true
    def user_home = System.getProperty('user.home')
    workDir = file("${user_home}/buildTool/nodeJs")
    npmWorkDir = file("${user_home}/buildTool/npm")
    yarnWorkDir = file("${user_home}/buildTool/yarn")
}

yarn_install {
    dependsOn 'yarn'
}

def isTestTask = gradle.startParameter.taskNames.any { it.toLowerCase().contains('test') }

yarn_check_config {
    yarnCommand = ['config', 'list']
    onlyIf { !isTestTask }
}

// 若gradle.properties中有yarnMirrorPath，才執行yarn_set_mirror
def yarnMirrorPath = project.findProperty('yarnMirrorPath') ?: ''
// 控制依賴關係 先yarn_check_config -> yarn_set_mirror
if (yarnMirrorPath) {
    tasks.yarn_check_config.dependsOn 'yarn_set_mirror'
}

yarn.mustRunAfter 'yarn_check_config'

yarn_set_mirror {
    yarnCommand = ['config', 'set', 'yarn-offline-mirror', yarnMirrorPath]
    onlyIf { !isTestTask }
}

yarn_build_local {
    if (yarnMirrorPath) {
        dependsOn 'yarn_set_mirror'
    }
    dependsOn 'yarn_check_config'
    dependsOn 'yarn'
    doLast {
        copy {
            from 'dist/catch-cash'
            into 'build/localJar'
        }
    }
    yarnCommand = ['build:local']
    onlyIf { !isTestTask }
}

yarn_build_dev {
    if (yarnMirrorPath) {
        dependsOn 'yarn_set_mirror'
    }
    dependsOn 'yarn_check_config'
    dependsOn 'yarn'
    doLast {
        copy {
            from 'dist/catch-cash'
            into 'build/devJar'
        }
    }
    yarnCommand = ['build:dev']
    onlyIf { !isTestTask }
}

task build_local(dependsOn: ['yarn_build_local']) {
    finalizedBy 'localJar'
}

task build_dev(dependsOn: ['yarn_build_dev']) {
    finalizedBy 'devJar'
}

task localJar(type: Jar, dependsOn: ['yarn_build_local']) {
    archiveClassifier = ''
//    archiveFileName = "${project.name}.jar"
    from 'build/localJar' into classpath_in_jar
}

task devJar(type: Jar, dependsOn: ['yarn_build_dev']) {
    archiveClassifier = ''
//    archiveFileName = "${project.name}.jar"
    from 'build/devJar' into classpath_in_jar
}

configurations {
    local
    dev
}

artifacts {
    local(localJar.archiveFile) {
        builtBy localJar
        type 'jar'
    }

    dev(devJar.archiveFile) {
        builtBy devJar
        type 'jar'
    }

    archives localJar
    archives devJar

}

